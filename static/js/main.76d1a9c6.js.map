{"version":3,"file":"static/js/main.76d1a9c6.js","mappings":"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","sources":["store/puzzle/puzzleSlice.js","components/numpad.js","utils/constants.js","utils/helpers.js","components/grid.js","utils/generator.js","screens/index.js","store/store.js","App.js","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import {\n  createSlice,\n  createAsyncThunk,\n  createEntityAdapter,\n  createSelector,\n} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  originalPuzzle: [],\n  puzzle: [],\n  solvedPuzzle: [],\n  cellSelected: null,\n  otherCellsSelected: [],\n  difficulty: 31,\n  solved: false,\n  countDown: 0\n};\n\nconst puzzleSlice = createSlice({\n  name: \"puzzle\",\n  initialState,\n  reducers: {\n    setPuzzle(state, action) {\n      state.originalPuzzle = action.payload.puzzle;\n      state.puzzle = action.payload.puzzle;\n      state.solvedPuzzle = action.payload.solvedPuzzle;\n      state.solved = false;\n\n      // Update the number of empty cells\n      for (let cell of state.puzzle) {\n        if (cell.value == 0)\n          state.countDown = state.countDown + 1;\n      }\n    },\n    selectCell(state, action) {\n      state.cellSelected = action.payload.cell.index;\n      state.otherCellsSelected = [];\n\n      // Update array of other cells with the same value as selected cell\n      for (let cell of action.payload.puzzle) {\n        if (cell.value == action.payload.cell.value)\n          state.otherCellsSelected.push(cell.index)\n      }\n    },\n    updateCell(state, action) {\n      const number = action.payload.number;\n      const index = action.payload.index;\n      const puzzle = state.puzzle;\n\n      // Update the cell if it can be edited\n      if (puzzle[index].edit) {\n        state.puzzle[index].value = number;\n\n        // If the value entered is not zero, deduct 1 from countdown\n        if (number > 0) {\n          state.countDown = state.countDown - 1;\n        }\n      }\n      let solvedPuzzle = state.solvedPuzzle;\n\n      // Check if all the cells have been filled\n      if (state.countDown < 1) {\n\n        // Check if the puzzle is solved\n        let solved = true;\n\n        for (let cell of puzzle) {\n          let index = cell.index;\n          let value = solvedPuzzle[index].value;\n\n          if (cell.value != value) {\n            solved = false;\n            break;\n          }\n        }\n        state.solved = solved;\n      }\n    },\n    setDifficulty(state, action) {\n      state.difficulty = action.payload;\n    },\n  }\n});\n\nexport const {\n  setPuzzle,\n  selectCell,\n  updateCell,\n  setDifficulty\n} = puzzleSlice.actions;\n\nexport default puzzleSlice.reducer;\n","import { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport Ionicons from '@expo/vector-icons/Ionicons';\n\nimport { updateCell } from '../store/puzzle/puzzleSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport default function Numpad() {\n\n    const dispatch = useDispatch();\n\n    const cellSelected = useSelector(state => state.puzzle.cellSelected)\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.row}>\n                <TouchableOpacity onPress={() => dispatch(updateCell({ number: 1, index: cellSelected }))}><Text style={styles.number}>1</Text></TouchableOpacity>\n                <TouchableOpacity onPress={() => dispatch(updateCell({ number: 2, index: cellSelected }))}><Text style={styles.number}>2</Text></TouchableOpacity>\n                <TouchableOpacity onPress={() => dispatch(updateCell({ number: 3, index: cellSelected }))}><Text style={styles.number}>3</Text></TouchableOpacity>\n            </View>\n            <View style={styles.row}>\n                <TouchableOpacity onPress={() => dispatch(updateCell({ number: 4, index: cellSelected }))}><Text style={styles.number}>4</Text></TouchableOpacity>\n                <TouchableOpacity onPress={() => dispatch(updateCell({ number: 5, index: cellSelected }))}><Text style={styles.number}>5</Text></TouchableOpacity>\n                <TouchableOpacity onPress={() => dispatch(updateCell({ number: 6, index: cellSelected }))}><Text style={styles.number}>6</Text></TouchableOpacity>\n            </View>\n            <View style={styles.row}>\n                <TouchableOpacity onPress={() => dispatch(updateCell({ number: 7, index: cellSelected }))}><Text style={styles.number}>7</Text></TouchableOpacity>\n                <TouchableOpacity onPress={() => dispatch(updateCell({ number: 8, index: cellSelected }))}><Text style={styles.number}>8</Text></TouchableOpacity>\n                <TouchableOpacity onPress={() => dispatch(updateCell({ number: 9, index: cellSelected }))}><Text style={styles.number}>9</Text></TouchableOpacity>\n            </View>\n            <TouchableOpacity onPress={() => dispatch(updateCell({ number: 0, index: cellSelected }))}><Ionicons style={styles.btn} name='backspace-outline' size={32} /></TouchableOpacity>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        marginTop: 20,\n        flexDirection: 'column',\n        paddingHorizontal: 20\n    },\n    number: {\n        fontFamily: 'Inter-Tight-Regular',\n        fontSize: 27,\n    },\n    row: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        marginTop: 20\n    },\n    btn: {\n        alignSelf: 'center',\n        marginTop: 20\n    }\n});","// Colours\nexport const colours = {\n    blue: '#5899E2',\n    gray: '#DDDDDD',\n    darkGray: '#AAAAAA',\n    light: '#FFFFFF',\n    dark: '#333333'\n}\n\n// Levels\nexport const levels = {\n    easy: 31,\n    medium: 41,\n    hard: 51,\n    expert: 61\n}","import { colours } from \"./constants\";\n\n// Determine if a cell should be dark or light\nexport function themeCell(index) {\n    let darkCells = [0, 1, 2, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 24, 25, 26, 30, 31, 32, 39, 40, 41, 48, 49, 50, 54, 55, 56, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 78, 79, 80];\n\n    if (darkCells.includes(index))\n        return true;\n    else\n        return false;\n}\n\n// Find an array in an array of arrays\nfunction findArray(arrayOfArrays, arrayToFind) {\n    const foundArray = arrayOfArrays.find(array => JSON.stringify(array) === JSON.stringify(arrayToFind));\n\n    if (foundArray) {\n        return true;\n    }\n    return false;\n}\n\n// Format seconds to hours, minutes and seconds\nexport const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = seconds % 60;\n\n    if(hours == 0)\n    return `${minutes < 10 ? '0' + minutes : minutes}:${remainingSeconds < 10 ? '0' + remainingSeconds : remainingSeconds}`;\n    if(hours > 0)\n    return `${hours < 10 ? '0' + hours : hours}:${minutes < 10 ? '0' + minutes : minutes}:${remainingSeconds < 10 ? '0' + remainingSeconds : remainingSeconds}`;\n}\n\n// Check if 2 arrays are equal\nexport function arraysAreEqual(arr1, arr2) {\n    // Check if arrays have the same length\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    // Check if each element in both arrays are equal\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n\n    // If all elements are equal and the arrays have the same length, they are equal\n    return true;\n}\n\n// Convert sudoku grid array into an array of cell objects\nexport function createGrid(puzzle) {\n    let grid = []\n    let counter = 0\n\n    for (let i = 0; i < puzzle.length; i++) {\n        for (let j = 0; j < puzzle[i].length; j++) {\n            grid.push({\n                index: counter,\n                value: puzzle[i][j],\n                textColour: puzzle[i][j] == 0 ? '#0778fc' : colours.dark,\n                bgColour: colours.light,\n                edit: puzzle[i][j] == 0 ? true : false\n            });\n            counter++;\n        }\n    }\n    return grid;\n}\n\n// Game difficulty level\nexport const level = (difficulty) => {\n    switch (difficulty) {\n        case 31:\n            return 'Easy';\n        case 41:\n            return 'Medium';\n        case 51:\n            return 'Hard';\n        case 61:\n            return 'Expert';\n        default:\n            return 'Easy';\n    }\n}","import React from 'react';\nimport { View, Text, StyleSheet, Pressable } from 'react-native';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { themeCell } from '../utils/helpers';\nimport { selectCell } from '../store/puzzle/puzzleSlice';\nimport { colours } from '../utils/constants';\n\nfunction SudokuGrid({ puzzle }) {\n\n    const cellSelected = useSelector(state => state.puzzle.cellSelected);\n    const otherCellsSelected = useSelector(state => state.puzzle.otherCellsSelected);\n    const solved = useSelector(state => state.puzzle.solved);\n\n    const dispatch = useDispatch();\n\n    // Render a single cell\n    const renderCell = (object, index) => (\n        <Pressable\n            key={index}\n            style={[styles.cell, solved ? styles.solved : (otherCellsSelected.includes(object.index) && object.value > 0 ? styles.otherSelectedCellBg : (cellSelected == object.index ? styles.selectedCellBg : (themeCell(object.index) ? styles.darkBg : null)))]}\n            onPress={() => dispatch(selectCell({cell: object, puzzle}))}\n        >\n            <Text style={[styles.cellText, {color: object.textColour}]}>{object.value == 0 ? '' : object.value}</Text>\n        </Pressable>\n    );\n\n    // Render a row of cells\n    const renderRow = (i) => (\n        <View key={i} style={styles.row}>\n            {puzzle.slice(i, i + 9).map(renderCell)}\n        </View>\n    );\n\n    return (\n        <View style={styles.container}>\n            {Array.from({ length: 9 }, (_, index) => index * 9).map(renderRow)}\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    row: {\n        flexDirection: 'row',\n    },\n    cell: {\n        width: 40,\n        height: 40,\n        borderWidth: 1,\n        borderColor: 'black',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    cellText: {\n        fontSize: 20,\n    },\n    darkBg: {\n        backgroundColor: colours.gray\n    },\n    selectedCellBg: {\n        backgroundColor: colours.darkGray\n    },\n    otherSelectedCellBg: {\n        backgroundColor: '#BBBBBB'\n    },\n    solved: {\n        backgroundColor: '#C1FF9B'\n    }\n});\n\nexport default SudokuGrid;\n","import { createGrid } from \"./helpers\";\n\n\nexport function generatePuzzle(emptyCells) {\n    const grid = Array.from({ length: 9 }, () => Array(9).fill(0));\n\n    // Function to check if a number is valid in a specific cell\n    function isValidNumber(row, col, num) {\n        // Check the row\n        for (let i = 0; i < 9; i++) {\n            if (grid[row][i] === num) return false;\n        }\n\n        // Check the column\n        for (let i = 0; i < 9; i++) {\n            if (grid[i][col] === num) return false;\n        }\n\n        // Check the 3x3 box\n        const boxRow = Math.floor(row / 3) * 3;\n        const boxCol = Math.floor(col / 3) * 3;\n        for (let i = boxRow; i < boxRow + 3; i++) {\n            for (let j = boxCol; j < boxCol + 3; j++) {\n                if (grid[i][j] === num) return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Function to solve the Sudoku using backtracking\n    function solve() {\n        for (let row = 0; row < 9; row++) {\n            for (let col = 0; col < 9; col++) {\n                if (grid[row][col] === 0) {\n                    for (let num = 1; num <= 9; num++) {\n                        if (isValidNumber(row, col, num)) {\n                            grid[row][col] = num;\n                            if (solve()) {\n                                return true;\n                            }\n                            grid[row][col] = 0;\n                        }\n                    }\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    // Fill the initial grid with a valid Sudoku\n    solve();\n    // Solved array\n    let solvedGrid = grid;\n    let _solvedGrid = createGrid(solvedGrid);\n\n    // Remove random numbers to create a puzzle\n    for (let i = 0; i < emptyCells; i++) {\n        const row = Math.floor(Math.random() * 9);\n        const col = Math.floor(Math.random() * 9);\n        grid[row][col] = 0;\n    }\n\n    let newGrid = createGrid(grid);\n\n    return {\n        puzzle: newGrid,\n        solvedPuzzle: _solvedGrid\n    }\n}\n","import { StatusBar } from 'expo-status-bar';\nimport { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, ScrollView, TouchableOpacity, Modal, Pressable, Platform } from 'react-native';\nimport Ionicons from '@expo/vector-icons/Ionicons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dimensions } from 'react-native';\n\nimport Numpad from '../components/numpad';\nimport SudokuGrid from '../components/grid';\nimport { generatePuzzle } from '../utils/generator';\nimport { formatTime, level } from '../utils/helpers';\nimport { setDifficulty, setPuzzle } from '../store/puzzle/puzzleSlice';\nimport { colours, levels } from '../utils/constants';\n\nconst screenWidth = Dimensions.get('window').width;\n\nexport default function Game() {\n\n    const [seconds, setSeconds] = useState(0)\n    const [isRunning, setIsRunning] = useState(false);\n    const [modalVisible, setModalVisible] = useState(false);\n\n    const puzzle = useSelector(state => state.puzzle.puzzle);\n    const originalPuzzle = useSelector(state => state.puzzle.originalPuzzle);\n    const solvedPuzzle = useSelector(state => state.puzzle.solvedPuzzle);\n    const difficulty = useSelector(state => state.puzzle.difficulty);\n    const solved = useSelector(state => state.puzzle.solved);\n\n    const [gameLevel, setGameLevel] = useState(level(difficulty));\n\n    const dispatch = useDispatch();\n\n    // Update the level label when difficulty changes\n    useEffect(() => {\n        toggleTimer();\n    }, [solved]);\n\n    // Update the level label when difficulty changes\n    useEffect(() => {\n        setGameLevel(level(difficulty));\n    }, [difficulty]);\n\n    // Generate puzzle and start timer\n    useEffect(() => {\n        dispatch(setPuzzle(generatePuzzle(difficulty)));\n        toggleTimer();\n    }, []);\n\n    // Timer\n    useEffect(() => {\n\n        let timerInterval;\n\n        if (isRunning) {\n            timerInterval = setInterval(() => {\n                setSeconds(prevSeconds => prevSeconds + 1);\n            }, 1000);\n        } else {\n            clearInterval(timerInterval);\n        }\n\n        return () => clearInterval(timerInterval);\n    }, [isRunning]);\n\n    const toggleTimer = () => {\n        setIsRunning(!isRunning);\n    };\n\n    const resetTimer = () => {\n        setSeconds(0);\n        setIsRunning(true);\n    };\n\n    // Set difficulty level\n    const handleDifficulty = (level) => {\n        dispatch(setDifficulty(level))\n        dispatch(setPuzzle(generatePuzzle(level)));\n        resetTimer();\n        setModalVisible(false);\n    }\n\n    // Reset the game and timer\n    const restart = () => {\n        dispatch(setPuzzle({\n            puzzle: originalPuzzle,\n            solvedPuzzle: solvedPuzzle\n        }));\n        resetTimer();\n    }\n\n    return (\n        <View style={styles.container}>\n            <ScrollView contentContainerStyle={styles.contentContainer} showsVerticalScrollIndicator={false} horizontal={false}>\n\n                <View style={styles.header}>\n                    <Text style={styles.timer}>{formatTime(seconds)}</Text>\n\n                    <TouchableOpacity onPress={() => restart()}>\n                        <Ionicons style={styles.refreshBtn} name='refresh-outline' size={32} />\n                    </TouchableOpacity>\n                </View>\n\n                <TouchableOpacity onPress={() => setModalVisible(true)}><Text style={styles.difficulty}>{gameLevel}</Text></TouchableOpacity>\n\n                <SudokuGrid puzzle={puzzle} />\n\n                <Numpad />\n\n            </ScrollView>\n\n            <Modal\n                animationType=\"slide\"\n                transparent={true}\n                visible={modalVisible}\n                onRequestClose={() => {\n                    Alert.alert('Modal has been closed.');\n                    setModalVisible(!modalVisible);\n                }}>\n                <View style={styles.centeredView}>\n                    <View style={styles.modalView}>\n                        <TouchableOpacity onPress={() => handleDifficulty(levels.easy)}>\n                            <Text style={styles.modalText}>Easy</Text>\n                        </TouchableOpacity>\n                        <View style={styles.line}></View>\n                        <TouchableOpacity onPress={() => handleDifficulty(levels.medium)}>\n                            <Text style={styles.modalText}>Medium</Text>\n                        </TouchableOpacity>\n                        <TouchableOpacity onPress={() => handleDifficulty(levels.hard)}>\n                            <Text style={styles.modalText}>Hard</Text>\n                        </TouchableOpacity>\n                        <TouchableOpacity onPress={() => handleDifficulty(levels.expert)}>\n                            <Text style={styles.modalText}>Expert</Text>\n                        </TouchableOpacity>\n\n                        <Pressable\n                            style={[styles.button, styles.buttonClose]}\n                            onPress={() => setModalVisible(!modalVisible)}>\n                            <Text style={styles.textStyle}>Close</Text>\n                        </Pressable>\n                    </View>\n                </View>\n            </Modal>\n\n            <StatusBar style=\"auto\" />\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        paddingTop: 25,\n        backgroundColor: 'white',\n    },\n    contentContainer: {\n        paddingVertical: 30,\n    },\n    header: {\n        flexDirection: 'row',\n        justifyContent: 'space-between'\n    },\n    timer: {\n        color: colours.dark,\n        fontSize: 27,\n        fontWeight: 'bold',\n        fontFamily: 'Inter-Tight-Bold'\n    },\n    refreshBtn: {},\n    difficulty: {\n        fontFamily: 'Inter-Tight-Regular',\n        marginTop: 10,\n        marginBottom: 20,\n        fontSize: 21,\n        color: colours.darkGray\n    },\n    modalView: {\n        alignSelf: 'center',\n        width: screenWidth > 500 ? '30%' : '80%',\n        margin: 20,\n        backgroundColor: 'white',\n        borderRadius: 20,\n        padding: 35,\n        alignItems: 'center',\n        shadowColor: '#000',\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 4,\n        elevation: 5,\n    },\n    button: {\n        borderRadius: 7,\n        paddingHorizontal: 20,\n        paddingVertical: 10,\n        elevation: 2,\n        marginTop: 30\n    },\n    buttonOpen: {\n        backgroundColor: colours.blue,\n    },\n    buttonClose: {\n        backgroundColor: colours.dark,\n    },\n    textStyle: {\n        color: 'white',\n        fontWeight: 'bold',\n        textAlign: 'center',\n        fontFamily: 'Inter-Tight-Regular',\n        fontSize: 19\n    },\n    modalText: {\n        marginTop: 15,\n        textAlign: 'center',\n        fontFamily: 'Inter-Tight-Regular',\n        fontSize: 19\n    },\n    line: {\n        borderColor: colours.darkGray,\n        borderWidth: 1\n    }\n});","import { configureStore } from '@reduxjs/toolkit'\nimport puzzleReducer from './puzzle/puzzleSlice'\n\nconst store = configureStore({\n  reducer: {\n    puzzle: puzzleReducer,\n  }\n})\n\nexport default store;","import { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Provider } from \"react-redux\";\nimport { useFonts } from \"expo-font\";\n// import * as SplashScreen from 'expo-splash-screen';\n\nimport Game from \"./screens\";\nimport store from \"./store/store\";\n\nexport default function App() {\n\n  const [fontsLoaded, fontError] = useFonts({\n    \"Inter-Tight-Regular\": require(\"./assets/fonts/Inter_Tight/static/InterTight-Regular.ttf\"),\n    \"Inter-Tight-Bold\": require(\"./assets/fonts/Inter_Tight/static/InterTight-Bold.ttf\"),\n  });\n\n  // const onLayoutRootView = useCallback(async () => {\n  //   if (fontsLoaded || fontError) {\n  //     await SplashScreen.hideAsync();\n  //   }\n  // }, [fontsLoaded, fontError]);\n\n  if (!fontsLoaded && !fontError) {\n    return null;\n  }\n\n  return (\n    <Provider store={store}>\n      {/* <View style={styles.container} onLayout={onLayoutRootView}> */}\n      <View style={styles.container}>\n        <Game />\n        <StatusBar style=\"auto\" />\n      </View>\n    </Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/sudoku-with-friends/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [518], () => (__webpack_require__(6271)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["puzzleSlice","createSlice","name","initialState","originalPuzzle","puzzle","solvedPuzzle","cellSelected","otherCellsSelected","difficulty","solved","countDown","reducers","setPuzzle","state","action","cell","payload","value","selectCell","index","push","updateCell","number","edit","setDifficulty","_puzzleSlice$actions","actions","Numpad","dispatch","useDispatch","useSelector","_jsxs","View","style","styles","container","children","row","_jsx","TouchableOpacity","onPress","Text","Ionicons","btn","size","StyleSheet","create","marginTop","flexDirection","paddingHorizontal","fontFamily","fontSize","alignItems","justifyContent","alignSelf","colours","blue","gray","darkGray","light","dark","levels","easy","medium","hard","expert","themeCell","includes","formatTime","seconds","hours","Math","floor","minutes","remainingSeconds","createGrid","grid","counter","i","length","j","textColour","bgColour","level","width","height","borderWidth","borderColor","cellText","darkBg","backgroundColor","selectedCellBg","otherSelectedCellBg","_ref","renderCell","object","Pressable","color","Array","from","_","map","slice","generatePuzzle","emptyCells","fill","isValidNumber","col","num","boxRow","boxCol","solve","_solvedGrid","random","screenWidth","Dimensions","get","Game","_useState","useState","_useState2","_slicedToArray","setSeconds","_useState3","_useState4","isRunning","setIsRunning","_useState5","_useState6","modalVisible","setModalVisible","_useState7","_useState8","gameLevel","setGameLevel","useEffect","toggleTimer","timerInterval","setInterval","prevSeconds","clearInterval","resetTimer","handleDifficulty","ScrollView","contentContainerStyle","contentContainer","showsVerticalScrollIndicator","horizontal","header","timer","refreshBtn","SudokuGrid","Modal","animationType","transparent","visible","onRequestClose","Alert","alert","centeredView","modalView","modalText","line","button","buttonClose","textStyle","StatusBar","flex","paddingTop","paddingVertical","fontWeight","marginBottom","margin","borderRadius","padding","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","buttonOpen","textAlign","configureStore","reducer","puzzleReducer","App","_useFonts","useFonts","require","_useFonts2","fontsLoaded","fontError","Provider","store","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}